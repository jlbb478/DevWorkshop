1. a. One common concept between the two is clear, efficient communication among a team. Another is increasing shared knowledge between members by giving constructive feedback/teachings. 
b. Microsoft emphasizes respectfulness a lot more than Yelp when correcting an issue in a teammate's code. Microsoft also suggests automation to help in the review process while Yelp does not. These steps should generally be included in a code review: Ensure code updates and feedback are on time to prevent bottlenecking, Correct teammates' code with respect and the goal of learning from mistakes, Make sure submitted code is concise and reviewed by submitter pre-team review.

2. A good code review example is the answer in the OOP Blackjack post (https://codereview.stackexchange.com/questions/272674/oop-blackjack-in-python-3-9-9). This reviewer gave a detailed breakdown of each area of the user's code. Not only did they correct areas where the code was incorrect, they gave suggestions on unused code/clutter, better efficiency, and the behavior of each syntax suggestion. This not only helped make the user's code much more concise, but the reviewer also helped the user learn more about Python in this review. The reviewer was also polite and complimented the user's work before the feedback. 
3. I found the last answer for this Parking Lot OOP review not as beneficial (https://codereview.stackexchange.com/questions/216290/parking-lot-oo-design-python). The reviewer did not go as into detail on the reasoning behind the changes they made, and just posted their revised code. Other reviewers gave compliments on the original code, then gave specific reasoning and benefits to each code revision, helping the user learn from their mistakes. I would suggest this reviewer to add a little bit of explanation to their numbered list of things they would improve, such as how the revision improves the overall code, or how the corrected syntax behaves compared to the original.